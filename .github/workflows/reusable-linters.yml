---

name: >-
  ❌
  [DO NOT CLICK]
  Linters

on:
  workflow_call:
    inputs:
      cache-key-files:
        description: Dependency files cache
        required: true
        type: string
      dists-artifact-name:
        description: Workflow artifact name containing dists
        required: true
        type: string
      python-version:
        description: Python version to provision in the VM
        required: true
        type: string
      release-requested:
        description: Flag whether this is CI run is a release request
        default: 'false'
        required: false
        type: string
      runner-vm-os:
        description: VM OS to use
        default: ubuntu
        required: false
        type: string
      source-tarball-name:
        description: Sdist filename wildcard
        required: true
        type: string
      toxenv:
        description: Name of the tox environment to use
        required: true
        type: string
      yolo:
        required: true
        type: string
    secrets:
      codecov-token:
        description: Mandatory token for uploading to Codecov
        required: true

env:
  COLOR: >-  # Supposedly, pytest or coveragepy use this
    yes
  FORCE_COLOR: 1  # Request colored output from CLI tools supporting it
  MYPY_FORCE_COLOR: 1  # MyPy's color enforcement
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  PIP_NO_PYTHON_VERSION_WARNING: 1
  PIP_NO_WARN_SCRIPT_LOCATION: 1
  PRE_COMMIT_COLOR: always
  PY_COLORS: 1  # Recognized by the `py` package, dependency of `pytest`
  PYTHONIOENCODING: utf-8
  PYTHONUTF8: 1
  TOX_PARALLEL_NO_SPINNER: 1
  TOX_TESTENV_PASSENV: >-  # Make tox-wrapped tools see color requests
    COLOR
    FORCE_COLOR
    MYPY_FORCE_COLOR
    NO_COLOR
    PIP_DISABLE_PIP_VERSION_CHECK
    PIP_NO_PYTHON_VERSION_WARNING
    PIP_NO_WARN_SCRIPT_LOCATION
    PRE_COMMIT_COLOR
    PY_COLORS
    PYTEST_THEME
    PYTEST_THEME_MODE
    PYTHONIOENCODING
    PYTHONLEGACYWINDOWSSTDIO
    PYTHONUTF8

jobs:
  tox:
    name: >-
      🧹 ${{
        inputs.toxenv
      }}@🐍${{
        inputs.python-version
      }}@${{
        inputs.runner-vm-os
      }}

    runs-on: ${{ inputs.runner-vm-os }}

    env:
      TOXENV: ${{ inputs.toxenv }}

    steps:
    - name: >-
        Switch to using Python v${{ inputs.python-version }}
        by default
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}

    # NOTE: `pre-commit --show-diff-on-failure` and `sphinxcontrib-spellcheck`
    # NOTE: with Git authors allowlist enabled both depend on the presence of a
    # NOTE: Git repository.
    - name: Grab the source from Git
      if: >-
        contains(fromJSON('["pre-commit", "spellcheck-docs"]'), inputs.toxenv)
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.release-committish }}
    - name: Retrieve the project source from an sdist inside the GHA artifact
      if: >-
        !contains(fromJSON('["pre-commit", "spellcheck-docs"]'), inputs.toxenv)
      uses: re-actors/checkout-python-sdist@release/v2
      with:
        source-tarball-name: ${{ inputs.source-tarball-name }}
        workflow-artifact-name: ${{ inputs.dists-artifact-name }}

    - name: Cache pre-commit.com virtualenvs
      if: inputs.toxenv == 'pre-commit'
      uses: actions/cache@v4
      with:
        path: ~/.cache/pre-commit
        key: >-
          ${{
            runner.os
          }}-pre-commit-${{
            hashFiles('.pre-commit-config.yaml')
          }}

    - name: >-
        Calculate Python interpreter version hash value
        for use in the cache key
      id: calc-cache-key-py
      run: |
        from hashlib import sha512
        from os import environ
        from pathlib import Path
        from sys import version

        FILE_APPEND_MODE = 'a'

        hash = sha512(version.encode()).hexdigest()

        with Path(environ['GITHUB_OUTPUT']).open(
                mode=FILE_APPEND_MODE,
        ) as outputs_file:
            print(f'py-hash-key={hash}', file=outputs_file)
      shell: python
    - name: Get pip cache dir
      id: pip-cache
      run: >-
        echo "dir=$(pip cache dir)" >> "${GITHUB_OUTPUT}"
    - name: Set up pip cache
      uses: actions/cache@v4
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: >-
          ${{ runner.os }}-pip-${{
          steps.calc-cache-key-py.outputs.py-hash-key }}-${{
          inputs.cache-key-files }}
        restore-keys: |
          ${{ runner.os }}-pip-${{
              steps.calc-cache-key-py.outputs.py-hash-key
          }}-
          ${{ runner.os }}-pip-
    - name: Install tox
      run: >-
        python -m
        pip install
        --user
        tox

    - name: Make the env clean of non-test files
      if: inputs.toxenv == 'metadata-validation'
      run: |
        shopt -s extglob
        rm -rf !tox.ini
      shell: bash
    - name: Download all the dists
      if: inputs.toxenv == 'metadata-validation'
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.dists-artifact-name }}
        path: dist/

    - name: >-
        Pre-populate tox envs: `${{ env.TOXENV }}`
      run: >-
        python -m
        tox
        --parallel auto
        --parallel-live
        --skip-missing-interpreters false
        --notest
    - name: Initialize pre-commit envs if needed
      if: inputs.toxenv == 'pre-commit'
      run: >-
        .tox/${{ inputs.toxenv }}/bin/python -m pre_commit install-hooks
    - name: >-
        Run tox envs: `${{ env.TOXENV }}`
      run: >-
        python -m
        tox
        --parallel auto
        --parallel-live
        --skip-missing-interpreters false
        --skip-pkg-install
    - name: Send coverage data to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.codecov-token }}
        files: >-
          .tox/.tmp/.test-results/mypy-py-3.13/cobertura.xml,
          .tox/.tmp/.test-results/mypy-py-3.12/cobertura.xml,
          .tox/.tmp/.test-results/mypy-py-3.11/cobertura.xml
        flags: >-
          CI-GHA,
          MyPy
        fail_ci_if_error: false

...
