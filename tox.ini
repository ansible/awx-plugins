[tox]
isolated_build = true

[testenv]
deps =
  covdefaults
  coverage  # accessed directly from tox
  coverage-enable-subprocess
  pytest
  pytest-cov
  pytest-xdist
commands =
  {envpython} -Im pytest {posargs:}
commands_post =
  {envpython} \
    -c \
    'import os, sys; \
    os.getenv("GITHUB_ACTIONS") == "true" or sys.exit(); \
    import coverage; \
    gh_summary_fd = open(\
    os.environ["GITHUB_STEP_SUMMARY"], encoding="utf-8", mode="a",\
    ); \
    cov = coverage.Coverage(); \
    cov.load(); \
    cov.report(file=gh_summary_fd, output_format="markdown"); \
    gh_summary_fd.close()'
  {envpython} \
    -c \
    'import os, pathlib, sys; \
    os.getenv("GITHUB_ACTIONS") == "true" or sys.exit(); \
    cov_report_arg_prefix = "--cov-report=xml:"; \
    test_report_arg_prefix = "--junitxml="; \
    cov_report_file = [arg[len(cov_report_arg_prefix):] for arg in sys.argv \
    if arg.startswith(cov_report_arg_prefix)][-1]; \
    test_report_file = [arg[len(test_report_arg_prefix):] for arg in sys.argv \
    if arg.startswith(test_report_arg_prefix)][-1]; \
    coverage_result_file = pathlib.Path(r"{toxinidir}") / cov_report_file; \
    test_result_file = pathlib.Path(r"{toxinidir}") / test_report_file; \
    gh_output_fd = open(\
    os.environ["GITHUB_OUTPUT"], encoding="utf-8", mode="a",\
    ); \
    print(f"cov-report-files={coverage_result_file !s}", file=gh_output_fd); \
    print(f"test-result-files={test_result_file !s}", file=gh_output_fd); \
    print("codecov-flags=pytest", file=gh_output_fd); \
    gh_output_fd.close()' {posargs}
package = editable
passenv =
  CI
  GITHUB_*
  SSH_AUTH_SOCK
  TERM
setenv =
  COVERAGE_PROCESS_START = {toxinidir}{/}.coveragerc
wheel_build_env = .pkg


[testenv:cleanup-dists]
description =
  Wipe the the dist{/} folder
deps =
commands_pre =
commands =
  {envpython} \
  -c \
    'import os, shutil, sys; \
    dists_dir = "dist{/}"; \
    shutil.rmtree(dists_dir, ignore_errors=True); \
    sys.exit(os.path.exists(dists_dir))'
commands_post =
package = skip


[testenv:build-dists]
description =
  Build dists with {basepython} and put them into the dist{/} folder
depends =
  cleanup-dists
deps =
  build ~= 1.2.1
commands =
  {envpython} -c \
    "import shutil; \
    shutil.rmtree('{toxinidir}{/}dist{/}', ignore_errors=True)"

  {envpython} -m build {posargs:}
commands_post =
package = skip


[testenv:metadata-validation]
description =
  Verify that dists under the `dist{/}` dir
  have valid metadata
depends =
  build-dists
deps =
  setuptools-scm
  twine
commands_pre =
  {envpython} -Im setuptools_scm ls
commands =
  {envpython} \
    -Im twine check \
    --strict \
    dist{/}*
commands_post =
package = skip


[testenv:pre-commit]
description =
  Run the quality checks under {basepython}; run as
  `SKIP=check-id1,check-id2 tox r -e pre-commit` to instruct the underlying
  `pre-commit` invocation avoid running said checks; Use
  `tox r -e pre-commit -- check-id1 --all-files` to select checks matching IDs
  aliases{:} `tox r -e pre-commit -- mypy --all-files` will run 3 MyPy
  invocations, but `tox r -e pre-commit -- mypy-py313 --all-files` runs one.
commands =
  {envpython} -Im \
    pre_commit run \
    --show-diff-on-failure \
    {posargs:--all-files}

  # Print out the advice on how to install pre-commit from this env into Git:
  -{envpython} -c \
  'cmd = "{envpython} -m pre_commit install"; \
    scr_width = len(cmd) + 10; \
    sep = "=" * scr_width; \
    cmd_str = "    $ \{cmd\}";' \
    'print(f"\n\{sep\}\nTo install pre-commit hooks into the Git repo, run:\n\n\{cmd_str\}\n\n\{sep\}\n")'
commands_post =
  {envpython} \
    -c \
    'import os, pathlib, sys; \
    os.getenv("GITHUB_ACTIONS") == "true" or sys.exit(); \
    test_results_dir = pathlib.Path(r"{temp_dir}") / ".test-results"; \
    coverage_result_files = ",".join(map(str, \
    test_results_dir.glob("pytest-*{/}cobertura.xml"))); \
    gh_output_fd = open(\
    os.environ["GITHUB_OUTPUT"], encoding="utf-8", mode="a",\
    ); \
    print(f"cov-report-files={coverage_result_files !s}", file=gh_output_fd); \
    print("codecov-flags=MyPy", file=gh_output_fd); \
    gh_output_fd.close()'
deps =
  pre-commit >= 2.6.0
isolated_build = true
package = skip
passenv =
  {[testenv]passenv}
  SKIP  # set this variable


[testenv:build-docs]
# NOTE: Passing the `is_unversioned` tag speeds up rebuilds in dev env
allowlist_externals =
  git
description = Build The Docs
changedir = docs{/}
commands_pre =
  # Retrieve possibly missing commits:
  -git fetch --unshallow
  -git fetch --tags

  # Clean up sphinxcontrib-apidoc generated RST files:
  -git clean -x -f -- 'pkg{/}*.rst'
commands =
  {envpython} \
    -Im sphinx \
    -j auto \
    -b html \
    {tty:--color} \
    -a \
    -n \
    -W --keep-going \
    -d '{temp_dir}{/}.doctrees' \
    . \
    {posargs:{envtmpdir}/html -t is_unversioned}
commands_post =
  # Print out the output docs dir and a way to serve html:
  {envpython} \
    -c\
    'import os, pathlib;\
    IS_RTD_ENV = os.getenv("READTHEDOCS", "False") == "True";\
    docs_dir = pathlib.Path(r"{envdir}") / "{envtmpdir}/html";\
    index_file = docs_dir / "index.html";\
    docs_url = os.environ["READTHEDOCS_CANONICAL_URL"] if IS_RTD_ENV \
    else f"file://\{index_file\}";\
    print(f"\nTo open the documentation, run\n\n\
    \tpython3 -Im webbrowser \
    \N\{QUOTATION MARK\}\{docs_url !s\}\N\{QUOTATION MARK\}\n");\
    not IS_RTD_ENV and \
    print(f"To serve \
    the docs with a local web server, use\n\n\
    \tpython3 -Im http.server --directory \
    \N\{QUOTATION MARK\}\{docs_dir\}\N\{QUOTATION MARK\} 0\n")'
deps =
  -r{toxinidir}/requirements{/}tox-docs.in
passenv =
  {[testenv]passenv}
  READTHEDOCS*  # Present @ RTD


[testenv:coverage-docs]
allowlist_externals =
  {[testenv:build-docs]allowlist_externals}
description = Measure coverage in docs
changedir = {[testenv:build-docs]changedir}
commands_pre =
  # Retrieve possibly missing commits:
  -git fetch --unshallow
  -git fetch --tags

  # Clean up sphinxcontrib-apidoc generated RST files:
  -git clean -x -f -- 'pkg{/}*.rst'
commands =
  {envpython} \
    -Im sphinx \
    -j auto \
    {tty:--color} \
    -a \
    -n \
    -W --keep-going \
    -b coverage \
    -d '{temp_dir}{/}.doctrees' \
    . \
    {posargs:{envtmpdir}/html}
commands_post =
deps =
  {[testenv:build-docs]deps}
passenv =
  {[testenv:build-docs]passenv}


[testenv:doctest-docs]
allowlist_externals =
  {[testenv:build-docs]allowlist_externals}
description = Doctest The Docs
changedir = {[testenv:build-docs]changedir}
commands_pre =
  # Retrieve possibly missing commits:
  -git fetch --unshallow
  -git fetch --tags

  # Clean up sphinxcontrib-apidoc generated RST files:
  -git clean -x -f -- 'pkg{/}*.rst'
commands =
  {envpython} \
    -Im sphinx \
    -j auto \
    {tty:--color} \
    -a \
    -n \
    -W --keep-going \
    -b doctest \
    -d '{temp_dir}{/}.doctrees' \
    . \
    {posargs:{envtmpdir}/html}
commands_post =
deps =
  {[testenv:build-docs]deps}
passenv =
  {[testenv:build-docs]passenv}


[testenv:linkcheck-docs]
allowlist_externals =
  {[testenv:build-docs]allowlist_externals}
description = Linkcheck The Docs
changedir = {[testenv:build-docs]changedir}
commands_pre =
  # Retrieve possibly missing commits:
  -git fetch --unshallow
  -git fetch --tags

  # Clean up sphinxcontrib-apidoc generated RST files:
  -git clean -x -f -- 'pkg{/}*.rst'
commands =
  {envpython} \
    -Im sphinx \
    -j auto \
    {tty:--color} \
    -a \
    -n \
    -W --keep-going \
    --keep-going \
    -b linkcheck \
    -d "{temp_dir}{/}.doctrees" \
    . \
    {posargs:{envtmpdir}/html}
commands_post =
deps =
  -rrequirements{/}tox-docs-linkcheck.in
passenv =
  {[testenv:build-docs]passenv}


[testenv:spellcheck-docs]
allowlist_externals =
  {[testenv:build-docs]allowlist_externals}
description = Spellcheck The Docs
changedir = {[testenv:build-docs]changedir}
commands_pre =
  # Retrieve possibly missing commits:
  -git fetch --unshallow
  -git fetch --tags

  # Clean up sphinxcontrib-apidoc generated RST files:
  -git clean -x -f -- 'pkg{/}*.rst'
commands =
  {envpython} \
    -m sphinx \
    -j auto \
    {tty:--color} \
    -a \
    -n \
    -W --keep-going \
    -b spelling --color \
    -d "{temp_dir}{/}.doctrees" \
    . "{toxworkdir}{/}docs_out"
commands_post =
deps =
  -rrequirements{/}tox-docs-spellcheck.in
passenv =
  {[testenv:build-docs]passenv}
