[tox]
isolated_build = true


[python-cli-options]
byte-warnings = -b
byte-errors = -bb
max-isolation = -E -s -I
some-isolation = -E -s
warnings-to-errors = -Werror


[testenv]
description = Run pytest under {envpython}
deps = -rrequirements{/}tox-py.in
install_command =
  {envpython} \
    {[python-cli-options]byte-errors} \
    {toxinidir}{/}bin{/}pip_wrapper.py \
    '{toxinidir}{/}requirements{/}' \
    '{envname}' \
    install {opts} {packages}
commands =
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]max-isolation} \
    {[python-cli-options]warnings-to-errors} \
    -m pytest \
      {tty:--color=yes} {posargs:}
commands_post =
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]max-isolation} \
    {[python-cli-options]warnings-to-errors} \
    -c \
      'import os, sys; \
      os.getenv("GITHUB_ACTIONS") == "true" or sys.exit(); \
      import coverage; \
      gh_summary_fd = open(\
        os.environ["GITHUB_STEP_SUMMARY"], encoding="utf-8", mode="a",\
      ); \
      cov = coverage.Coverage(); \
      cov.load(); \
      cov.report(file=gh_summary_fd, output_format="markdown"); \
      gh_summary_fd.close()'
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]max-isolation} \
    {[python-cli-options]warnings-to-errors} \
    -c \
      'import os, pathlib, sys; \
      os.getenv("GITHUB_ACTIONS") == "true" or sys.exit(); \
      cov_report_arg_prefix = "--cov-report=xml:"; \
      test_report_arg_prefix = "--junitxml="; \
      cov_report_file = [\
        arg[len(cov_report_arg_prefix):] for arg in sys.argv \
        if arg.startswith(cov_report_arg_prefix)\
      ][-1]; \
      test_report_file = [\
        arg[len(test_report_arg_prefix):] for arg in sys.argv \
        if arg.startswith(test_report_arg_prefix)\
      ][-1]; \
      gh_output_fd = open(\
        os.environ["GITHUB_OUTPUT"], encoding="utf-8", mode="a",\
      ); \
      print(f"cov-report-files={cov_report_file !s}", file=gh_output_fd); \
      print(f"test-result-files={test_report_file !s}", file=gh_output_fd); \
      print("codecov-flags=pytest", file=gh_output_fd); \
      gh_output_fd.close()' \
    {posargs}
package = editable
pass_env =
  CI
  GITHUB_*
  SSH_AUTH_SOCK
  TERM
set_env =
  COVERAGE_PROCESS_START = {toxinidir}{/}.coveragerc
wheel_build_env = .pkg


[pkgenv]
# NOTE: `[testenv:.pkg]` does not work due to a regression in tox v4.14.1
# NOTE: so `[pkgenv]` is being used in place of it.
# Refs:
# * https://github.com/tox-dev/tox/pull/3237
# * https://github.com/tox-dev/tox/issues/3238
# * https://github.com/tox-dev/tox/issues/3292
# * https://hynek.me/articles/turbo-charge-tox/
set_env =
  PIP_CONSTRAINT = requirements{/}dist-build-constraints.txt


[testenv:cleanup-dists]
description =
  Wipe the the dist{/} folder
deps =
commands_pre =
commands =
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]max-isolation} \
    {[python-cli-options]warnings-to-errors} \
    -c \
      'import os, shutil, sys; \
      dists_dir = "{toxinidir}{/}dist{/}"; \
      shutil.rmtree(dists_dir, ignore_errors=True); \
      sys.exit(os.path.exists(dists_dir))'
commands_post =
package = skip


[testenv:build-dists]
allowlist_externals =
  env
description =
  Build dists with {basepython} and put them into the dist{/} folder
depends =
  cleanup-dists
deps = -rrequirements{/}tox-{envname}.in
commands =
  env PIP_CONSTRAINT=requirements{/}dist-build-constraints.txt \
    {envpython} \
      {[python-cli-options]byte-errors} \
      {[python-cli-options]max-isolation} \
      {[python-cli-options]warnings-to-errors} \
      -m build \
        {posargs:}
commands_post =
package = skip


[testenv:metadata-validation]
description =
  Verify that dists under the `dist{/}` dir
  have valid metadata
depends =
  build-dists
deps = -rrequirements{/}tox-{envname}.in
commands_pre =
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]max-isolation} \
    {[python-cli-options]warnings-to-errors} \
    '-Wdefault{:}git archive did not support describe output\
      {:}UserWarning{:}setuptools_scm.git' \
    '-Wdefault{:}unprocessed git archival found\
      {:}UserWarning{:}setuptools_scm.git' \
    -m setuptools_scm \
      ls
commands =
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]max-isolation} \
    {[python-cli-options]warnings-to-errors} \
    -m twine \
      check \
      --strict \
      dist{/}*
commands_post =
package = skip


[testenv:pre-commit]
description =
  Run the quality checks under {basepython}; run as
  `SKIP=check-id1,check-id2 tox r -e pre-commit` to instruct the underlying
  `pre-commit` invocation avoid running said checks; Use
  `tox r -e pre-commit -- check-id1 --all-files` to select checks matching IDs
  aliases{:} `tox r -e pre-commit -- mypy --all-files` will run 3 MyPy
  invocations, but `tox r -e pre-commit -- mypy-py313 --all-files` runs one.
commands =
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]max-isolation} \
    {[python-cli-options]warnings-to-errors} \
    -m pre_commit \
      run \
      --color=always \
      --show-diff-on-failure \
      {posargs:--all-files}

  # Print out the advice on how to install pre-commit from this env into Git:
  -{envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]max-isolation} \
    {[python-cli-options]warnings-to-errors} \
    -c \
      'cmd = "{envpython} -m pre_commit install"; \
      scr_width = len(cmd) + 10; \
      sep = "=" * scr_width; \
      cmd_str = "    $ \{cmd\}";' \
      'print(f"\n\{sep\}\nTo install pre-commit hooks into the Git repo, run:\
      \n\n\{cmd_str\}\n\n\{sep\}\n")'
commands_post =
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]max-isolation} \
    {[python-cli-options]warnings-to-errors} \
    -c \
      'import os, pathlib, sys; \
      os.getenv("GITHUB_ACTIONS") == "true" or sys.exit(); \
      project_root_path = pathlib.Path(r"{toxinidir}"); \
      test_results_dir = pathlib.Path(r"{temp_dir}") / ".test-results"; \
      coverage_result_files = ",".join(\
        str(xml_path.relative_to(project_root_path)) \
        for xml_path in test_results_dir.glob("mypy--py-*{/}cobertura.xml")\
      ); \
      gh_output_fd = open(\
        os.environ["GITHUB_OUTPUT"], encoding="utf-8", mode="a",\
      ); \
      print(\
        f"cov-report-files={coverage_result_files !s}", file=gh_output_fd\
      ); \
      print("codecov-flags=MyPy", file=gh_output_fd); \
      gh_output_fd.close()'
deps = -rrequirements{/}tox-{envname}.in
isolated_build = true
package = skip
pass_env =
  {[testenv]pass_env}
  SKIP  # set this variable


[testenv:build-docs]
# NOTE: Passing the `is_unversioned` tag speeds up rebuilds in dev env
allowlist_externals =
  git
description = Build The Docs
changedir = docs{/}
commands_pre =
  # Retrieve possibly missing commits:
  -git fetch --unshallow
  -git fetch --tags

  # Clean up sphinxcontrib-apidoc generated RST files:
  -git clean -x -f -- 'pkg{/}*.rst'
commands =
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]max-isolation} \
    {[python-cli-options]warnings-to-errors} \
    -m sphinx \
      -j auto \
      -b html \
      {tty:--color} \
      -a \
      -n \
      -W --keep-going \
      -d '{temp_dir}{/}.doctrees' \
      . \
      {posargs:{envtmpdir}{/}html -t is_unversioned}
commands_post =
  # Print out the output docs dir and a way to serve html:
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]max-isolation} \
    {[python-cli-options]warnings-to-errors} \
    -c\
      'import os, pathlib;\
      IS_RTD_ENV = os.getenv("READTHEDOCS", "False") == "True";\
      docs_dir = pathlib.Path(r"{envdir}") / r"{envtmpdir}" / "html";\
      index_file = docs_dir / "index.html";\
      docs_url = os.environ["READTHEDOCS_CANONICAL_URL"] if IS_RTD_ENV \
      else f"file://\{index_file\}";\
      print(f"\nTo open the documentation, run\n\n\
      \tpython3 -Im webbrowser \
      \N\{QUOTATION MARK\}\{docs_url !s\}\N\{QUOTATION MARK\}\n");\
      not IS_RTD_ENV and \
      print(f"To serve \
      the docs with a local web server, use\n\n\
      \tpython3 -Im http.server --directory \
      \N\{QUOTATION MARK\}\{docs_dir\}\N\{QUOTATION MARK\} 0\n")'
deps =
  -r{toxinidir}{/}requirements{/}tox-{envname}.in
pass_env =
  {[testenv]pass_env}
  READTHEDOCS*  # Present @ RTD


[testenv:coverage-docs]
allowlist_externals =
  {[testenv:build-docs]allowlist_externals}
description = Measure coverage in docs
changedir = {[testenv:build-docs]changedir}
commands_pre =
  # Retrieve possibly missing commits:
  -git fetch --unshallow
  -git fetch --tags

  # Clean up sphinxcontrib-apidoc generated RST files:
  -git clean -x -f -- 'pkg{/}*.rst'
commands =
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]max-isolation} \
    {[python-cli-options]warnings-to-errors} \
    -m sphinx \
      -j auto \
      {tty:--color} \
      -a \
      -n \
      -W --keep-going \
      -b coverage \
      -d '{temp_dir}{/}.doctrees' \
      . \
      {posargs:{envtmpdir}{/}coverage}
commands_post =
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]max-isolation} \
    {[python-cli-options]warnings-to-errors} \
    -c \
      'import os, pathlib, shlex, sys; \
      os.getenv("GITHUB_ACTIONS") == "true" or sys.exit(); \
      output_dir = pathlib.Path(\
        shlex.split(r"{posargs:{envtmpdir}{/}coverage}")[0]\
      ); \
      output_txt_file = output_dir / "python.txt"; \
      gh_summary_fd = open(\
        os.environ["GITHUB_STEP_SUMMARY"], encoding="utf-8", mode="a",\
      ); \
      print(output_txt_file.read_text(), file=gh_summary_fd); \
      gh_summary_fd.close()'
deps =
  {[testenv:build-docs]deps}
pass_env =
  {[testenv:build-docs]pass_env}


[testenv:doctest-docs]
allowlist_externals =
  {[testenv:build-docs]allowlist_externals}
description = Doctest The Docs
changedir = {[testenv:build-docs]changedir}
commands_pre =
  # Retrieve possibly missing commits:
  -git fetch --unshallow
  -git fetch --tags

  # Clean up sphinxcontrib-apidoc generated RST files:
  -git clean -x -f -- 'pkg{/}*.rst'
commands =
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]max-isolation} \
    {[python-cli-options]warnings-to-errors} \
    -m sphinx \
      -j auto \
      {tty:--color} \
      -a \
      -n \
      -W --keep-going \
      -b doctest \
      -d '{temp_dir}{/}.doctrees' \
      . \
      {posargs:{envtmpdir}{/}doctest}
commands_post =
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]max-isolation} \
    {[python-cli-options]warnings-to-errors} \
    -c \
      'import os, pathlib, shlex, sys; \
      os.getenv("GITHUB_ACTIONS") == "true" or sys.exit(); \
      output_dir = pathlib.Path(\
        shlex.split(r"{posargs:{envtmpdir}{/}doctest}")[0]\
      ); \
      output_txt_file = output_dir / "output.txt"; \
      gh_summary_fd = open(\
        os.environ["GITHUB_STEP_SUMMARY"], encoding="utf-8", mode="a",\
      ); \
      print(output_txt_file.read_text(), file=gh_summary_fd); \
      gh_summary_fd.close()'
deps =
  {[testenv:build-docs]deps}
pass_env =
  {[testenv:build-docs]pass_env}


[testenv:linkcheck-docs]
allowlist_externals =
  {[testenv:build-docs]allowlist_externals}
description = Linkcheck The Docs
changedir = {[testenv:build-docs]changedir}
commands_pre =
  # Retrieve possibly missing commits:
  -git fetch --unshallow
  -git fetch --tags

  # Clean up sphinxcontrib-apidoc generated RST files:
  -git clean -x -f -- 'pkg{/}*.rst'
commands =
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]max-isolation} \
    {[python-cli-options]warnings-to-errors} \
    -m sphinx \
      -j auto \
      {tty:--color} \
      -a \
      -n \
      -W --keep-going \
      --keep-going \
      -b linkcheck \
      -d "{temp_dir}{/}.doctrees" \
      . \
      {posargs:{envtmpdir}{/}linkcheck}
commands_post =
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]max-isolation} \
    {[python-cli-options]warnings-to-errors} \
    -c \
      'import os, pathlib, shlex, sys; \
      os.getenv("GITHUB_ACTIONS") == "true" or sys.exit(); \
      output_dir = pathlib.Path(\
        shlex.split(r"{posargs:{envtmpdir}{/}linkcheck}")[0]\
      ); \
      output_json_file = output_dir / "output.json"; \
      output_txt_file = output_dir / "output.txt"; \
      gh_summary_fd = open(\
        os.environ["GITHUB_STEP_SUMMARY"], encoding="utf-8", mode="a",\
      ); \
      print(output_json_file.read_text(), file=gh_summary_fd); \
      print(output_txt_file.read_text(), file=gh_summary_fd); \
      gh_summary_fd.close()'
deps =
  -rrequirements{/}tox-{envname}.in
pass_env =
  {[testenv:build-docs]pass_env}


[testenv:spellcheck-docs]
allowlist_externals =
  {[testenv:build-docs]allowlist_externals}
description = Spellcheck The Docs
changedir = {[testenv:build-docs]changedir}
commands_pre =
  # Retrieve possibly missing commits:
  -git fetch --unshallow
  -git fetch --tags

  # Clean up sphinxcontrib-apidoc generated RST files:
  -git clean -x -f -- 'pkg{/}*.rst'
# FIXME: The `sphinxcontrib-spelling` builder emits a resource warning.
# Ref: https://github.com/sphinx-contrib/spelling/pull/226
commands =
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]max-isolation} \
    {[python-cli-options]warnings-to-errors} \
    -Wdefault::ResourceWarning \
    -m sphinx \
      -j auto \
      {tty:--color} \
      -a \
      -n \
      -W --keep-going \
      -b spelling --color \
      -d "{temp_dir}{/}.doctrees" \
      . "{toxworkdir}{/}spelling"
commands_post =
deps =
  -rrequirements{/}tox-{envname}.in
pass_env =
  {[testenv:build-docs]pass_env}


[testenv:pip-compile]
description = Run `pip-compile {posargs:}` under {envpython}
deps = -rrequirements{/}tox-pip-compile.in
commands =
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]max-isolation} \
    {[python-cli-options]warnings-to-errors} \
    '-Wdefault{:}pkg_resources is deprecated as an API{:}DeprecationWarning' \
    -m piptools \
      compile \
      {posargs:}
commands_post =
  # NOTE: Invocations without posargs result in trailing spaces in the
  # NOTE: `pip-tools` generated file headers. This snippet cleans them up.
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]max-isolation} \
    {[python-cli-options]warnings-to-errors} \
    -c \
      'import os, pathlib, re; \
      project_root_path = pathlib.Path(r"{toxinidir}"); \
      requirements_dir = project_root_path / "requirements"; \
      [\
        lock_file.write_text(\
          re.sub(\
            r"\s*?(?P<CRLF>(?:\r\n|\r|\n))+?", \
            r"\g<CRLF>", \
            lock_file.read_text(encoding="utf-8"), \
            flags=re.MULTILINE,\
          ), \
          encoding="utf-8",\
        ) \
        for lock_file in requirements_dir.glob("*.txt")\
      ]'
package = skip
set_env =
  CUSTOM_COMPILE_COMMAND = tox r -e {envname} -- {posargs:}


[testenv:pip-compile-build-lock]
description = Produce a PEP 517/660 build deps lock using {envpython}
deps = {[testenv:pip-compile]deps}
commands =
  {envpython} \
    {[python-cli-options]byte-warnings} \
    {[python-cli-options]max-isolation} \
    {[python-cli-options]warnings-to-errors} \
    '-Wdefault{:}pkg_resources is deprecated as an API{:}DeprecationWarning' \
    '-Wdefault{:}Unimplemented abstract methods{:}DeprecationWarning' \
    -m piptools \
      compile \
      --only-build-deps \
      --all-build-deps \
      --output-file=requirements{/}dist-build-constraints.txt \
      {posargs:}
commands_post =
  # NOTE: Invocations without posargs result in trailing spaces in the
  # NOTE: `pip-tools` generated file headers. This snippet cleans them up.
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]max-isolation} \
    {[python-cli-options]warnings-to-errors} \
    -c \
      'import os, pathlib, re; \
      project_root_path = pathlib.Path(r"{toxinidir}"); \
      requirements_dir = project_root_path / "requirements"; \
      [\
        lock_file.write_text(\
          re.sub(\
            r"\s*?(?P<CRLF>(?:\r\n|\r|\n))+?", \
            r"\g<CRLF>", \
            lock_file.read_text(encoding="utf-8"), \
            flags=re.MULTILINE,\
          ), \
          encoding="utf-8",\
        ) \
        for lock_file in requirements_dir.glob("*.txt")\
      ]'
set_env =
  CUSTOM_COMPILE_COMMAND = tox r -e {envname} -- {posargs:}
package = {[testenv:pip-compile]package}


[testenv:pip-compile-tox-env-lock]
description = Produce {posargs} lock file using {envpython}
deps = {[testenv:pip-compile]deps}
commands =
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]some-isolation} \
    {[python-cli-options]warnings-to-errors} \
    bin{/}resolve_platform_lock_file.py \
      'requirements{/}' \
      {posargs}
commands_post =
  # NOTE: Invocations without posargs result in trailing spaces in the
  # NOTE: `pip-tools` generated file headers. This snippet cleans them up.
  {envpython} \
    {[python-cli-options]byte-errors} \
    {[python-cli-options]max-isolation} \
    {[python-cli-options]warnings-to-errors} \
    -c \
      'import os, pathlib, re; \
      project_root_path = pathlib.Path(r"{toxinidir}"); \
      requirements_dir = project_root_path / "requirements"; \
      [\
        lock_file.write_text(\
          re.sub(\
            r"\s*?(?P<CRLF>(?:\r\n|\r|\n))+?", \
            r"\g<CRLF>", \
            lock_file.read_text(encoding="utf-8"), \
            flags=re.MULTILINE,\
          ), \
          encoding="utf-8",\
        ) \
        for lock_file in requirements_dir.glob("*.txt")\
      ]'
set_env =
  CUSTOM_COMPILE_COMMAND = tox r -e {envname} -- {posargs:}
package = {[testenv:pip-compile]package}
